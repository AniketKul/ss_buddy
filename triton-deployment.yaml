apiVersion: apps/v1
kind: Deployment
metadata:
  name: triton-server
  namespace: triton
  labels:
    app: triton-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: triton-server
  template:
    metadata:
      labels:
        app: triton-server
    spec:
      initContainers:
      - name: model-setup
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          mkdir -p /models/task_router_ensemble/1
          mkdir -p /models/complexity_router_ensemble/1
          
          # Create simple models that return fixed probabilities
          cat > /models/task_router_ensemble/config.pbtxt << 'EOF'
          name: "task_router_ensemble"
          backend: "identity"
          max_batch_size: 1
          input [
            {
              name: "INPUT"
              data_type: TYPE_STRING
              dims: [ 1 ]
            }
          ]
          output [
            {
              name: "OUTPUT"
              data_type: TYPE_FP32
              dims: [ 12 ]
            }
          ]
          EOF
          
          # Create dummy data file for task router (12 classes)
          echo "0.1 0.05 0.15 0.08 0.12 0.06 0.09 0.11 0.07 0.04 0.08 0.05" > /models/task_router_ensemble/1/output0_data
          
          cat > /models/complexity_router_ensemble/config.pbtxt << 'EOF'
          name: "complexity_router_ensemble"
          backend: "identity"
          max_batch_size: 1
          input [
            {
              name: "INPUT"
              data_type: TYPE_STRING
              dims: [ 1 ]
            }
          ]
          output [
            {
              name: "OUTPUT"
              data_type: TYPE_FP32
              dims: [ 7 ]
            }
          ]
          EOF
          
          # Create dummy data file for complexity router (7 classes)
          echo "0.2 0.15 0.18 0.12 0.14 0.11 0.1" > /models/complexity_router_ensemble/1/output0_data
          
          echo "Models created successfully"
        volumeMounts:
        - name: model-repository
          mountPath: /models
      containers:
      - name: triton-server
        image: python:3.9-slim
        ports:
        - containerPort: 8000
          name: http
        command:
        - python3
        - -c
        - |
          import json
          import random
          from http.server import HTTPServer, BaseHTTPRequestHandler
          
          class TritonMockHandler(BaseHTTPRequestHandler):
              def do_POST(self):
                  if '/infer' in self.path:
                      try:
                          content_length = int(self.headers.get('Content-Length', 0))
                          if content_length > 0:
                              post_data = self.rfile.read(content_length)
                          
                          # Mock response based on model
                          if 'task_router' in self.path:
                              # 12 classes for task router
                              probs = [random.random() for _ in range(12)]
                              total = sum(probs)
                              probs = [p/total for p in probs]  # normalize
                          else:
                              # 7 classes for complexity router  
                              probs = [random.random() for _ in range(7)]
                              total = sum(probs)
                              probs = [p/total for p in probs]  # normalize
                          
                          response = {
                              'outputs': [
                                  {
                                      'name': 'OUTPUT',
                                      'datatype': 'FP32',
                                      'shape': [1, len(probs)],
                                      'data': probs
                                  }
                              ]
                          }
                          
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          self.wfile.write(json.dumps(response).encode())
                      except Exception as e:
                          self.send_response(500)
                          self.end_headers()
                          self.wfile.write(str(e).encode())
                  elif '/health' in self.path:
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      self.wfile.write(b'{"status": "ready"}')
                  else:
                      self.send_response(404)
                      self.end_headers()
              
              def do_GET(self):
                  if '/v2/health' in self.path:
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      self.wfile.write(b'{"status": "ready"}')
                  else:
                      self.send_response(404)
                      self.end_headers()
          
          print('Starting mock Triton server on port 8000...')
          server = HTTPServer(('0.0.0.0', 8000), TritonMockHandler)
          server.serve_forever()
        resources:
          requests:
            memory: "256Mi"
            cpu: "0.1"
          limits:
            memory: "512Mi"
            cpu: "0.5"
        livenessProbe:
          httpGet:
            path: /v2/health/live
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /v2/health/ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: model-repository
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: router-server
  namespace: triton
  labels:
    app: triton-server
spec:
  type: NodePort
  ports:
  - port: 8000
    targetPort: 8000
    nodePort: 30800
    protocol: TCP
    name: http
  selector:
    app: triton-server
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: triton-ingress
  namespace: triton
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - host: router-server
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: router-server
            port:
              number: 8000 